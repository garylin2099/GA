% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/select.R
\name{select}
\alias{select}
\title{Variable Selection using Genetic Algorithms}
\usage{
select(
  X,
  y,
  poolSize = round(2 * ncol(X)),
  objectiveFunction = stats::AIC,
  tournamentSelection = FALSE,
  groupNum = floor(poolSize/3),
  numCrossoverSplit = 1,
  mutationRate = 0.01,
  maxMutationRate = NULL,
  maxIter = 100,
  minIter = maxIter/10,
  regressionType = "gaussian",
  oneParentRandom = FALSE,
  diversityCutoff = max(0.05, 1/poolSize),
  nCores = 1
)
}
\arguments{
\item{X}{a matrix or dataframe of predictor variables}

\item{nCores}{an integer indicating number of parallel processes to run when evaluating fitness. Default is 1, or no paralleization. See \code{\link{evaluate_fitness}}.

If user wants to use custom objective_function, they must use a function that is compatible with \code{\link{lm}} or \code{\link{glm}} fitted objects which output a numberic value of length 1.}

\item{Y}{vector of response variable}

\item{family}{a character string describing the error distribution and link function to be used in the model. Default is gaussian.}

\item{objective_function}{function for computing objective. Default is \code{\link{AIC}}. User can specify custom function.}

\item{crossover_parents_function}{a function for crossover between mate pairs. User can specify custom function. Default is \code{\link{crossover_parents}}.}

\item{crossover_method}{a character string describing crossover method. Default is multi-point crossover. See \code{\link{crossover_parents}}.}

\item{pCrossover}{a numeric value for he probability of crossover for each mate pair.}

\item{start_chrom}{a numeric value for the  size of the popuation of chromosomes. Default is \code{choose(C, 2)} \eqn{\le 200}, where C is number of predictors.}

\item{mutation_rate}{a numeric value for rate of mutation. Default is \eqn{1 / (P \sqrt C)}, where P is number of chromosomes, and C is number of predictors.}

\item{converge}{a logical value indicating whether algorithm should attempt to converge or run for specified number of iterations. If \code{TRUE}, convergence will occur when highest ranked chromosomes is equal to mean of top 50\% in current and previous generation.}

\item{tol}{a numeric value indicating convergence tolerance. Default is 1e-4.}

\item{iter}{an integer specifying maximum number of generations algorithm will produce. Default is 100}

\item{minimize}{a logical value indicating whether optimize should be minimized (TRUE) or maximized (FALSE).}
}
\description{
select implements genetic algorithms for variable selection for GLMs by optimizing package or user specified objective functions such as AIC, BIC, and logloglikelihood.
Uses functions: \code{\link{generate_founders}}, \code{\link{evaluate_fitness}}, and \code{\link{create_next_generation}}.
Functions find optimal variables by using evolutationry biology concepts of natural selection, fitness, genetic crossover, and mutation. Founding generation of chromosomes is randomly generated and evaluated using an critieria such as AIC, BIC, or loglihood. Parents are selected by their fitness, and generate children chromosomes. As each generation breeds and produces new genreations, the algorithm moves towards the optimum.
}
\details{
1. Geof H. Givens, Jennifer A. Hoeting (2013) Combinatorial Optimization (italicize). Chapter 3 of Computational Statistics (italicize).
}
\examples{
x1 <- rnorm(100, 2, 1)
x2 <- rnorm(100, 5, 1)
x3 <- rnorm(100, -1, 1)
x4 <- rnorm(100, 18, 1)
x5 <- rnorm(100, -7, 1)
x6 <- rnorm(100, -20, 1)
x7 <- rnorm(100, 15, 1)
x8 <- rnorm(100, -9, 1)
X <- data.frame(x1, x2, x3, x4, x5, x6, x7, x8)
y <- x1 + x3 + x4 - 2 * x6 - x8 + rnorm(100, 0, 0.1)
lm(cbind(y, X))
glm(cbind(y, X), family = "gaussian")
for (i in 1:1) {
 result <- select(X, y, maxMutationRate = 0.05, numCrossoverSplit = 3, tournamentSelection = FALSE)
}
result
}
